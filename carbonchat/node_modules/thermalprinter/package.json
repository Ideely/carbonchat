{
  "name": "thermalprinter",
  "version": "0.3.8",
  "description": "Use node.js to communicate with Adafruit/Sparkfun Thermal Printer",
  "repository": {
    "type": "git",
    "url": "git://github.com/xseignard/thermalPrinter.git"
  },
  "main": "src/printer.js",
  "files": [
    "src/"
  ],
  "author": {
    "name": "Xavier Seignard",
    "email": "xavier.seignard@gmail.com"
  },
  "contributors": [
    {
      "name": "Flurin Egger",
      "email": "<flurin@digitpaint.nl"
    }
  ],
  "scripts": {
    "test": "mocha -R spec test/**/*.test.js",
    "test:watch": "npm run test -- -w",
    "lint": "jshint src test demo",
    "coverage": "istanbul cover --dir ./reports _mocha -- -R spec test/**/*.test.js",
    "codeclimate": "CODECLIMATE_REPO_TOKEN=81648f70a46f19c1b4d5c9cf7f53fa40969af62284554621c22d7d038d2c637e codeclimate-test-reporter < reports/lcov.info",
    "clean": "rimraf reports",
    "ci": "npm run clean && npm run lint && npm run test && npm run coverage && npm run codeclimate"
  },
  "keywords": [
    "adafruit",
    "printer",
    "thermal",
    "serialport"
  ],
  "license": "MIT",
  "homepage": "https://github.com/xseignard/thermalPrinter",
  "bugs": {
    "url": "https://github.com/xseignard/thermalPrinter/issues"
  },
  "dependencies": {
    "async": "^1.5.0",
    "deasync": "^0.1.3",
    "get-pixels": "^3.2.3"
  },
  "devDependencies": {
    "chai": "latest",
    "codeclimate-test-reporter": "latest",
    "istanbul": "latest",
    "jshint": "latest",
    "mocha": "latest",
    "rimraf": "latest",
    "serialport": "latest"
  },
  "readme": "# Control the Adafruit/Sparkfun thermal printer from node.js\n\n[![npm](https://img.shields.io/npm/v/thermalprinter.svg?style=flat-square)](https://www.npmjs.com/package/thermalprinter) [![Travis](https://img.shields.io/travis/xseignard/thermalPrinter.svg?style=flat-square)](https://travis-ci.org/xseignard/thermalPrinter) [![Code Climate](https://img.shields.io/codeclimate/coverage/github/xseignard/thermalPrinter.svg?style=flat-square)](https://codeclimate.com/github/xseignard/thermalPrinter/coverage)\n\nLargely inspired by http://electronicfields.wordpress.com/2011/09/29/thermal-printer-dot-net/\n\nYou can print images, but they need to be 384px wide.\n\nIt's a fluent API, so you can chain functions, but don't forget to call `print` at the end to actually print something!\n\n## Crappy schematics\n\nYou'll need an USB/Serial converter.\n\n![schematics](/images/schema.png)\n\n\n## Usage\n- install with `npm install thermalprinter --save` \n- check the demo sample:\n\n```js\nvar SerialPort = require('serialport').SerialPort,\n\tserialPort = new SerialPort('/dev/ttyUSB0', {\n\t\tbaudrate: 19200\n\t}),\n\tPrinter = require('thermalprinter');\n\nvar path = __dirname + '/images/nodebot.png';\n\nserialPort.on('open',function() {\n\tvar printer = new Printer(serialPort);\n\tprinter.on('ready', function() {\n\t\tprinter\n\t\t\t.indent(10)\n\t\t\t.horizontalLine(16)\n\t\t\t.bold(true)\n\t\t\t.indent(10)\n\t\t\t.printLine('first line')\n\t\t\t.bold(false)\n\t\t\t.inverse(true)\n\t\t\t.big(true)\n\t\t\t.right()\n\t\t\t.printLine('second line')\n\t\t\t.printImage(path)\n\t\t\t.print(function() {\n\t\t\t\tconsole.log('done');\n\t\t\t\tprocess.exit();\n\t\t\t});\n\t});\n});\n```\n\n## Demo\n\n![demo](/images/demo.gif)\n",
  "readmeFilename": "README.md",
  "_id": "thermalprinter@0.3.8",
  "_shasum": "6c1abbe768f8fe251b8955f5371d53bfeb92a307",
  "_from": "thermalprinter@0.3.8",
  "_resolved": "https://registry.npmjs.org/thermalprinter/-/thermalprinter-0.3.8.tgz"
}
